name: Automatic App Build

permissions:
  contents: write

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'CHANGELOG.md'
      - '.github/**'
      - 'README.md'

jobs:
  auto:
    name: Get App Version
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push'}}
    outputs:
      release_commit: ${{ steps.commit_check.outputs.release_commit }}
      version: ${{ steps.commit_check.outputs.version }}
    steps:
      - name: Check Commit Message
        id: commit_check
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          regex="v([0-9]+(\.[0-9]+)*)"
          if [[ $commit_message =~ $regex ]]; then
             version="${BASH_REMATCH[1]}"
             echo "release_commit=true" >> $GITHUB_OUTPUT
             echo "version=$version" >> $GITHUB_OUTPUT
          else 
             echo "release_commit=false" >> $GITHUB_OUTPUT
          fi;

  run_job:
    name: Build app Automatically
    runs-on: ubuntu-latest
    needs: auto
    if: needs.auto.outputs.release_commit == 'true'
    outputs:
      version: ${{ needs.auto.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Here we need to decode keystore.jks from base64 string and place it
      # in the folder specified in the release signing configuration
      - name: Decode Keystore
        id: decode_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: "android_keystore.jks"
          fileDir: "/home/runner/work/Light-Novels/Light-Novels/app/keystore/"
          encodedString: ${{ secrets.KEYSTORE }}

      # Build and sign APK ("-x test" argument is used to skip tests)
      - name: Build APK
        run: |
          ./gradlew :app:assembleRelease -x test
          APK_PATH=$(find $(pwd)/app/build/outputs/apk/release/ -name "*.apk" -type f)
          echo "APK File Path: $APK_PATH"
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      # # Show information about the APK's signing certificates
      # - name: Verify Signature
      #   run: "$ANDROID_SDK_ROOT/build-tools/33.0.1/apksigner verify --print-certs app/build/outputs/apk/release/Light\ Novels_${{ github.event.inputs.version }}.apk"

      # Save the APK after the Build job is complete to publish it as a Github release in the next job
      - name: Upload APK
        uses: actions/upload-artifact@v3.1.2
        with:
          name: Light Novels
          path: "app/build/outputs/apk/release/Light\ Novels_${{ needs.auto.outputs.version }}.apk"

  release:
    name: Release APK
    needs: run_job
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
          echo ${{ needs.run_job.outputs.version }}
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: Light Novels

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: Light-Novels/Light-novel-with-readium
        with:
          tag_name: v${{ needs.run_job.outputs.version }}
          name: Release v${{ needs.run_job.outputs.version }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false
          files: Light Novels/Light Novels_${{needs.run_job.outputs.version }}.apk